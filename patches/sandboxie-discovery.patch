diff --git a/source/discovery/carla-discovery.cpp b/source/discovery/carla-discovery.cpp
index 1be334e45..200771885 100644
--- a/source/discovery/carla-discovery.cpp
+++ b/source/discovery/carla-discovery.cpp
@@ -20,6 +20,7 @@
 #include "CarlaMathUtils.hpp"
 #include "CarlaMIDI.h"
 #include "LinkedList.hpp"
+#include "CarlaUtils.hpp"
 
 #ifdef BUILD_BRIDGE
 # undef HAVE_FLUIDSYNTH
@@ -69,6 +70,8 @@
 #ifdef CARLA_OS_WIN
 # include <pthread.h>
 # include <objbase.h>
+# include <iostream>
+# include <fstream>
 #endif
 
 #ifdef HAVE_FLUIDSYNTH
@@ -418,6 +421,7 @@ static void do_ladspa_check(lib_t& libHandle, const char* const filename, const
         DISCOVERY_OUT("parameters.outs", parametersOuts);
         DISCOVERY_OUT("end", "------------");
     }
+
 }
 
 static void do_dssi_check(lib_t& libHandle, const char* const filename, const bool doInit)
@@ -1668,6 +1672,27 @@ int main(int argc, char* argv[])
     CarlaString filenameCheck(filename);
     filenameCheck.toLower();
 
+    CarlaString pluginPath(filename);
+    CarlaString discoveryPath(argv[0]);
+
+#ifdef CARLA_OS_WIN64
+    CarlaString discoveryBit("64");
+#else
+    CarlaString discoveryBit("32");
+#endif
+  
+    char discoveryOut[MAX_PATH];
+    char discoveryOutTemp[MAX_PATH];
+ 
+    carla_zeroChars(discoveryOut, MAX_PATH);
+    carla_zeroChars(discoveryOutTemp, MAX_PATH);
+
+    sprintf(discoveryOut, "%s\\carla-discovery_%s_%s", getenv("TEMP"), discoveryBit.buffer(), pluginPath.toBasic().buffer());
+    sprintf(discoveryOutTemp, "%s.tmp", discoveryOut);
+
+    std::ofstream buf(discoveryOutTemp);
+    std::cout.rdbuf(buf.rdbuf());
+
     bool openLib = false;
     lib_t handle = nullptr;
 
@@ -1831,6 +1856,10 @@ int main(int argc, char* argv[])
         break;
     }
 
+    std::cout << std::flush ;
+    buf.close();
+    ::MoveFile(discoveryOutTemp, discoveryOut);
+
 #if defined(CARLA_OS_MAC) && defined(USING_JUCE) && defined(__aarch64__)
     if (retryJucePlugin)
     {
